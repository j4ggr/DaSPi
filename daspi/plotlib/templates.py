from typing import Self

from .chart import JointChart
from .plotter import Line
from .plotter import Scatter
from .plotter import Probability
from .plotter import GaussianKDE

from ..anova import LinearModel
from ..strings import STR


class ResiduesCharts:
    """
    Provides a set of charts for visualizing the residuals of a linear 
    regression model.

    The `ResiduesCharts` class takes a `LinearModel` instance and 
    generates a set of four charts:
    - Probability plot of the residuals
    - Gaussian kernel density estimate of the residuals
    - Scatter plot of the predicted values vs. the observed values
    - Line plot of the predicted values vs. the observed values

    The `plot()` method generates the charts, and the `label()` method 
    adds titles and labels to the charts.

    Parameters
    ----------
    linear_model : LinearModel
        The linear regression model whose residuals will be visualized.

    Returns
    -------
    Self: 
        The `ResiduesCharts` instance, for method chaining.
    """

    def __init__(self, linear_model: LinearModel) -> None:
        self.lm = linear_model
        self.chart = JointChart(
            source=self.lm.residual_data(),
            target='Residues',
            feature=('', '', 'Prediction', 'Observation'),
            nrows=2,
            ncols=2,
            sharey=True,
            stretch_figsize=False)
        
    def plot(self) -> Self:
        """Generates a set of four charts for visualizing the residuals 
        of a linear regression model:
        - Probability plot of the residuals
        - Gaussian kernel density estimate of the residuals
        - Scatter plot of the predicted values vs. the observed values
        - Line plot of the predicted values vs. the observed values
        
        This method is part of the `ResiduesCharts` class, which takes 
        a `LinearModel` instance and generates the charts.
        
        Returns
        -------
        Self: 
            The `ResiduesCharts` instance, for method chaining.
        """
        self.chart.plot(Probability, show_fit_ci=True
            ).plot(GaussianKDE
            ).plot(Scatter
            ).plot(Line, {'marker': 'o'})
        return self

    def label(self, info: bool | str = True) -> Self:
        """Adds titles and labels to the charts generated by the 
        `plot()` method.
        
        Parameters
        ----------
        info : bool | str, optional
            If `True`, the method will add an informative subtitle to 
            the chart. If a string is provided, it will be used as the 
            subtitle, by default True.
        
        Returns
        -------
        Self
            The `ResiduesCharts` instance, for method chaining.
        """
                
        sub_title = f'{self.lm.target} ~ {" + ".join(self.lm.effects().index)}'
        self.chart.label(
            fig_title = STR['residcharts_fig_title'], # type: ignore
            sub_title = sub_title,
            target_label = 'Residuen',
            feature_label = STR['residcharts_feature_labels'],
            info = info)
        return self

__all__ = ['ResiduesCharts']
